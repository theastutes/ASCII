/*!
  * compress-base64 v1.0.0
  * (c) 2020
  * author: sunsilent
  * @license MIT
  */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.CompressBase64 = factory());
}(this, (function () { 'use strict';

  function compress(base64, options) {
    return new Promise(function (resolve, reject) {
      var type = options.type,
          width = options.width,
          min = options.min,
          max = options.max;
      var img = new Image();
      var quality = 0.6;
      img.src = base64;
      img.setAttribute('crossOrigin', 'Anonymous');
      var imgWidth, imgHeight;

      img.onload = function () {
        imgWidth = img.width;
        imgHeight = img.height;
        var canvas = document.createElement('canvas');
        var ctx = canvas.getContext('2d');

        if (Math.max(imgWidth, imgHeight) > width) {
          if (imgWidth > imgHeight) {
            canvas.width = width;
            canvas.height = width * imgHeight / imgWidth;
          } else {
            canvas.height = width;
            canvas.width = width * imgWidth / imgHeight;
          }
        } else {
          canvas.width = imgWidth;
          canvas.height = imgHeight;
          quality = 0.6;
        }

        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
        var base64 = canvas.toDataURL(type, quality);

        while (base64.length / 1024 > max) {
          quality -= 0.01;
          base64 = canvas.toDataURL(type, quality);
        }

        while (base64.length / 1024 < min) {
          quality += 0.001;
          base64 = canvas.toDataURL(type, quality);
        }

        resolve(base64);
      };

      img.onerror = function () {
        reject();
      };
    });
  }

  return compress;

})));
